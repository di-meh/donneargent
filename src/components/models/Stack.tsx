/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { type JSX } from 'react'
import { useGLTF } from '@react-three/drei'
import type { GLTF } from 'three-stdlib'
import { RigidBody, type RigidBodyProps } from '@react-three/rapier'

type GLTFResult = GLTF & {
  nodes: {
    stack: THREE.Mesh
  }
  materials: {}
}

export function Stack(props: RigidBodyProps) {
  const { nodes, materials } = useGLTF('/models/stack.glb') as unknown as GLTFResult
  return (
    <RigidBody type="dynamic" colliders="cuboid" name="stack" {...props}>
        <group dispose={null}>
        <mesh
            name="stack"
            castShadow
            receiveShadow
            geometry={nodes.stack.geometry}
            material={nodes.stack.material}
            position={[0, -0.063, 0]}
        />
        </group>
    </RigidBody>
  )
}

useGLTF.preload('/models/stack.glb')
